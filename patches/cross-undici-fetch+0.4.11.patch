diff --git a/node_modules/cross-undici-fetch/dist/create-node-ponyfill.js b/node_modules/cross-undici-fetch/dist/create-node-ponyfill.js
index 1466669..79ab0ff 100644
--- a/node_modules/cross-undici-fetch/dist/create-node-ponyfill.js
+++ b/node_modules/cross-undici-fetch/dist/create-node-ponyfill.js
@@ -208,8 +208,28 @@ module.exports = function createNodePonyfill(opts = {}) {
       ponyfills.Response = function Response(body, init) {
         if (body != null && body[Symbol.toStringTag] === 'ReadableStream') {
           const actualBody = streams.Readable.from(body);
+          /**
+           * If we cancel an EventSource stream, the close event is emitted.
+           */
+          // actualBody.on("close", () => {
+          //   console.log("CLOSE")
+          //   body.cancel()
+          // })
+          /**
+           * For defer/stream aka incremental delivery a canceled response does not result in a close event.
+           * However, it seems like the pause event is always emitted.
+           * Using the pause event over the close event feels like a hack though.
+           * We should investigate on wht the close event is never emitted.
+           */
+          actualBody.on("pause", () => {
+            actualBody.destroy()
+            console.log("PAUSE")
+            body.cancel()
+          })
           // Polyfill ReadableStream is not working well with node-fetch's Response
-          return new OriginalResponse(actualBody, init);
+          const response = new OriginalResponse(actualBody, init);
+
+          return response
         }
         return new OriginalResponse(body, init);
       };
